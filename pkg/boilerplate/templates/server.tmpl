package server

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"{{.ModulePath}}/internal/logger"
	"{{.ModulePath}}/internal/templates"
	_ "github.com/a-h/templ"
)

type server struct {
	port       int
	httpServer *http.Server
}

// Creat a new server instance with the given logger and port
func NewServer(port int) (*server, error) {
	return &server{
	port:    port}, nil
}

// Start the server
func (s *server) Start() error {
	logger.Log(4, fmt.Sprintf("Starting server on port %d", s.port))
	var stopChan chan os.Signal

	// define router
	router := http.NewServeMux()

	fileServer := http.FileServer(http.Dir("./static"))
	router.Handle("GET /static/", http.StripPrefix("/static/", fileServer))

	router.HandleFunc("GET /", s.defaultHandler)

	// define server
	s.httpServer = &http.Server{
		Addr:    fmt.Sprintf(":%d", s.port),
		Handler: router}

	// create channel to listen for signals
	stopChan = make(chan os.Signal, 1)
	signal.Notify(stopChan, os.Interrupt, syscall.SIGTERM)

	go func() {
		if err := s.httpServer.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			logger.Log(1, fmt.Sprintf("Error when running server: %s", err))
		}
	}()

	<-stopChan

	if err := s.httpServer.Shutdown(context.Background()); err != nil {
		logger.Log(2, fmt.Sprintf("Error when shutting down server: %v", err))
		return err
	}
	return nil
}

// GET /
func (s *server) defaultHandler(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusOK)
	if err := templates.Index().Render(r.Context(), w); err != nil {
		logger.Log(2, fmt.Sprintf("Error when rendering index: %v", err))
	}
}